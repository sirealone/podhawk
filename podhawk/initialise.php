<?php

if(!defined('ACTION')) die("You do not have authority to run ".__FILE__);

############################################################################
##
##  USER DEFINABLE CONSTANTS AND VARIABLES
##
## by default, PodHawk will store sessions in the database
## Change 'true' to 'false' if you want to use the standard session storage location defined in php.ini

define('STORE_SESSIONS_IN_DATABASE', true);

## if you store sessions in the database, the default session life is 20 minutes (ie the session 'dies' after 
## 20 minutes of inactivity). You can change the session life below. If you are not storing sessions in the database,
## session life will be determined by the garbage collection parameters set for php. 

define('SESSION_LIFE', 1200); //1200 seconds = 20 minutes

## by default, PodHawk will use an encrypted handshake protocol for logging in to the backend pages.
## Change 'true' to'false' if you want unencrypted logins

define('USE_ENCRYPTED_HANDSHAKE', true);

## by default, PodHawk will refuse to save any changes in your database unless it receives a 
## code to show that the request came from one of your admin pages and not from a hacker.
## Change, 'true' to 'false' if you want to disable this feature.

define('AUTHENTICATE_BACKEND_REQUESTS', true);

## by default, PodHawk will encrypt your ftp username and password,
## in the settings page, using Blowfish. If you do not want these settings to be encrypted, change 'true' to 'false'

define('USE_BLOWFISH_ENCRYPTION', true);

## when PodHawk has read your config file and extracted the settings from the database, it
## will use $settings[error_reporting] to set the error reporting level.
## Until then, you can uncomment one of the two following lines:

//error_reporting(E_ALL);
//error_reporting(0);

## FTP Permissions Control.
## If the php ftp extension is loaded and you have entered details of your ftp username etc in the settings page,
## PodHawk will use ftp to control the permissions on directories where new data needs to be written.
## This is a much safer alternative to giving these directories '0777' ("world writable") permissions.
## Change to 'false' if you do not want PodHawk to do this.

define ('USE_FTP_PERMISSIONS', true);

## PodHawk creates .htaccess files in cache directories to block access from outside.
## However, .htaccess files create problems on some servers. Change true to false to override default behaviour.

define ('USE_HTACCESS', true);

## By default, recording page 1 displays a Flash file uploader. Change true to false to use
## classic http file upload instead.

define('USE_FLASH_UPLOADER', true);

## For security, it is desireable to prevent Smarty templates from accessing potentially sensitive php data (eg constants).
## This is important if you allow a third party to develop Smarty templates for you.
## Security mode is on by default. Change 'true' to 'false' to disable Smarty security

define ('PODHAWK_SMARTY_SECURITY', true);

## Smarty security settings
##
## PHP_HANDLING - false = php code cannot be embedded in templates
## PHP_TAGS - false = {php}..{/php} tags not allowed in templates
## INCLUDE_ANY - true = allows any template to be 'included' from the file system
## ALLOW_CONSTANTS - false = templates cannot access php constants with {$smarty.const.foo}.
##					Podhawk uses constants for holding sensitive data such as database passwords.
## IF_FUNCS = array of php functions which may be used in template {if.....} statements
## MODIFIER_FUNCS = array of php functions which may be used in template string modifiers
## You can add additional functions to the IF_FUNCS and MODIFIER_FUNCS arrays if necesssary.
## Further information in Smarty documentation 

$podhawk_smarty_security_settings = array(
		'PHP_HANDLING'    	=> false,
		'PHP_TAGS' 			=> false,
		'INCLUDE_ANY' 		=> true,
		'ALLOW_CONSTANTS' 	=> false,
		'IF_FUNCS'        	=> array('array', 'list','isset', 'empty', 'count', 'sizeof','in_array', 'is_array', 'true', 'false', 'null'),
		'MODIFIER_FUNCS' 	=> array('count', 'getmegabyte', 'strtotime', 'urldecode', 'trim', 'strtoupper', 'strtolower', 'html_entity_decode', 'urlencode')
		);

## PodHawk will by default use the php PDO extension to connect to the database,
## if the extension and the necessary drivers are present; otherwise it will use ADODB Lite.
## Change 'false' to 'true' below to force PodHawk to use Adodb Lite.

define('FORCE_ADODB', false);

## Debug options
## 'log' = error messages generated by the PodHawk programme (ie not PHP system messages) are sent to errors.log
## 'db_queries' = as log, plus all database queries are sent to errors.log
## 'verbose' = as debug, with full stack trace for errors

define('DEBUG', 'log');

## Log file compression
## PodHawk rotates log files weekly. It will compress old log files as either 'gz' or 'zip' files, and keep them 
## for 4 weeks. It uses gz by default, provided the zlib extension is loaded.
## If you want to use zip format instead of gz, change 'gz' to 'zip' below
## (but first check in PHP Information page that the 'zip' extension is loaded)

define ('COMPRESSED_LOGS', 'gz');

## PodHawk will send an email when a user posts a new comment on your site, and can send a compressed backup
## of your MySQL database as an email attachment. It needs to know where the mail programme is located

$p = ini_get('sendmail_path');
$bits = explode(' ', trim($p));
$ini_mail_path = $bits[0];
$mail_path = (!empty($ini_mail_path)) ? $ini_mail_path : '/usr/sbin/sendmail';
define ('MAIL_PATH', $mail_path);

## Directory for storing audio comments - relative to PodHawk root.
## if you want your users to be able to submit audio (mp3 or ogg) comments, it is STRONGLY
## ADVISED that you create a directory 'audio_comments' one level above the root of your 
## site i.e. at a location inaccessible from the web. If Podhawk cannot find a directory
## at this location, it will use the 'audio' directory instead. If you need to place your 'audio_comments'
## directory somewhere else (eg because PodHawk is installed at www.mysite.com/podcasts and not at
## www.mysite.com), then edit the code below so that it points to a directory 'audio_comments' at
## a level above your web root.

$audio_comments_directory = "../audio_comments/";

## Downloading files.
## Podhawk has a download engine which it uses to download audio/video files when download counting
## is switched on (on settings page). If instead of using the download engine,
## you want PodHawk to send a "Location" header to the browser with the address of the requested file,
## change 'false' to 'true' below.

define('SEND_DOWNLOAD_LOCATION_HEADERS', false);

## Counting visitors
## If you switch on "count visitors" in the settings page, PodHawk will record details of every visitor
## to your website. By default it deletes records that are more than 3600 seconds (= 1 hour) old,
## i.e. it keeps a record of visitors in the last hour. If you want to keep a record for a different period,
## change '3600' below to the number (of seconds) that you want. Be careful. If you choose a very long period
## of time, the visitors table in the database may get very big, and this will make your webpages slower.

define('VISITOR_RECORD_LIFE', 3600);

## Website language
## The language declared in the 'content-language' metatag on your webpage

define('DEFAULT_WEBPAGE_LANGUAGE', 'en');

## Amazon S3
## PodHawk can upload audio files from your 'audio' folder to a 'bucket' in Amazon S3 (and vice versa). (Details on settings page).
## The default behaviour is that PodHawk will delete the file in the 'audio' folder after successful upload to your Amazon S3 bucket; and delete the file
## in your Amazon S3 bucket after successful download to the audio folder, or when you delete the post.
## Change 'false' to 'true' below if you want PodHawk to keep a copy of the file in your audio folder after upload to Amazon S3; and keep the file
## in Amazon S3 after download to the audio folder, or when you delete the post. 

define('RETAIN_ON_AMAZON_UPLOAD', false);

## Location of the config file. PodHawk will automatically look for a configuration file in podhawk/custom/.
## If it cannot find a configuration file there, then PodHawk will look in the directory
## above the root of your PodHawk site. This is a secure location, since it is inaccessible from the web.
## If you need to place your config file somewhere other than one of these two locations, enter the full path
## from your server root in the line below eg $path_to_config = "/home/www/mysite.com/config.php";

$path_to_config = "";

## Intermediate caching.
## PodHawk caches data about postings, and its registers of settings, categories, players, authors and tags
## so that they do not need to be recalculated every time a page is loaded.
## The cache is at podhawk/ph_cache.
## To turn off caching, change 'true' to 'false' below

define('PH_CACHING', true);

## Location of jQuery
## Podhawk webpages need the jQuery javascript library. You can define here where the library should load from. 
## You can use a Content delivery Network (CDN) such as Google AJAX Libraries or jQuery's own CDN.
## Details at http://jquery.com/download/
## Or you can host a copy of jQuery on your own site and download from there, though it is generally better to use a CDN.
## Note: the Lightbox plugin does not work with the latest jQuery version 1.9.

define('JQUERY_LOCATION', 'https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js');

## END USER DEFINABLE CONSTANTS
#############################################################################

	require_once "inc/classes/Configuration.php";
	
	$config = new Configuration();

	if (!empty($path_to_config))
	{ 
		$config->setPathToConfig($path_to_config);
	}

	$configured = $config->configure();
		
	if (!$configured)
	{ 
		$link_to_install = (ACTION == "backend") ? "../install.php" : "install.php";
		die("<br /><br />I cannot find a valid configuration file!
		 You need to run the <a href=\"$link_to_install\">install programme</a> before you can use PodHawk.");
	}

	define('AUDIOPATH', PATH_TO_ROOT."/audio/");
	define('UPLOAD_PATH', PATH_TO_ROOT."/upload/");
	define('IMAGES_PATH', PATH_TO_ROOT . "/images/");
	define('GETID3_HELPERAPPSDIR', PATH_TO_ROOT . '/podhawk/helperapps/'); // location of helpers for getid3 on Windows machines
	
	require (PATH_TO_ROOT . '/podhawk/common_definitions.php');
	
	//tell Smarty where to find its files
	define('SMARTY_DIR', PATH_TO_ROOT . "/podhawk/smarty-engine/");

	//define the directory where the JW player should be installed
	define('JW_DIR', PATH_TO_ROOT."/podhawk/custom/players/jwplayer/");

	//define the plugin directory
	define('PLUGINS_DIR', PATH_TO_ROOT . "/podhawk/custom/plugins/");

	//include functions and Smarty base class
	require_once INCLUDE_FILES . '/functions.php';
	require_once SMARTY_DIR . 'Smarty.class.php';

	// register our autoload function, so that we can use other libraries with their own autoloaders.
	if (function_exists('spl_autoload_register'))
	{
		spl_autoload_register("__PHAutoload");
	}
	else // pre PHP 5.1.2, we create a general __autoload() function
	{
		function __autoload($classname)
		{
			if (__PHAutoload($classname) == FALSE)
			{
				require_once PATH_TO_ROOT . '/podhawk/html_purifier/HTMLPurifier/Bootstrap.php';
				HTMLPurifier_Bootstrap::autoload();
			}
		}
	}

	//connect to database
	$connect = new DB_Connection(DB_TYPE);
	define('DB_CONNECTION_TYPE', $connect->getConnectionType());
	$GLOBALS['lbdata'] = $connect->makeConnection();	
	
	//log writers for errors and events
	$log 	= LO_ErrorLog::instance();
	$events = LO_EventLog::instance();

	//instantiate a Registry object with info about settings and categories
	$reg = Registry::instance();

	define ('THIS_URL', 	$reg->findSetting('url'));
	define ('SITENAME', 	$reg->findSetting('sitename'));
	define ('PH_VERSION', 	$reg->findSetting('ph_version'));

	

	// define where audio comments will be stored
	if (@is_dir(resolveDir($audio_comments_directory, PATH_TO_ROOT)))
	{
		define('AUDIO_COMMENTS', $audio_comments_directory);
	}
	else
	{
		define('AUDIO_COMMENTS', 'audio');
	}

	//set error reporting
	if ($reg->findSetting('error_reporting') !== false)
	{
		$errors = $reg->findSetting('error_reporting');
		switch ($errors)
		{
			case 0 :
			error_reporting(0);
			break;

			case 1 :
			ini_set('display_errors', 1);
			error_reporting(E_ERROR | E_WARNING | E_PARSE);
			break;

			case 2 :
			ini_set('display_errors', 1);

			if (defined('E_DEPRECATED')) // ADODB_Lite throws some 'deprecated' errors
				{
					error_reporting(E_ALL ^ E_DEPRECATED);
				}
				else
				{
					error_reporting(E_ALL);
				}
			break;
		}
	}
	
	//are we on the homepage?
	$homepage = false;
	if ((count($_GET)== 0) OR ((isset($_GET['page'])) && ($_GET['page'] == 1) && (count($_GET) == 1)))
	{
		$homepage = true;
	}
	define('HOMEPAGE', $homepage);

	//do we display all posts or just a single category on the homepage?
	if (ACTION == 'webpage' && $reg->findSetting('homepage') > 0 && (count($_GET)== 0 OR (isset($_GET['page']) && count($_GET) == 1)))
	{
		 $_GET['cat'] = $reg->getCategory($reg->findSetting('homepage'));
	}
		 
	//magic quotes are evil!
	if (get_magic_quotes_gpc())
	{
	   $_GET   = array_map('stripslashes_deep', $_GET);
	   $_POST  = array_map('stripslashes_deep', $_POST);
	}


	if (ACTION == 'backend')
	{

		// define which directories need to be writable by PodHawk
		$writable_dirs = array("audio", "images", "upload");

		// add the audio comments directory if necessary
		if (AUDIO_COMMENTS != 'audio')
		{
			$writable_dirs[] = AUDIO_COMMENTS;
		}

		// create permissions object to handle writable directories
		$permissions = new Permissions($writable_dirs);

		//create cache manager
		$cache_manager = new CacheManager($cache_dirs);

		// if cache directories do not exist, create them
		$cache_manager->make_directory_all();

	}

	// plugins	

	// instantiate a plugins object
	$plugins = Plugins::instance();

	// do we want debug messages?
	//$plugins->debug();

	if (empty($noValidURL)) // call the onInitialise event only if the noValidURL flag has not been set
	{
		//send 'onInitialise' event to plugins
		$h = $plugins->event("onInitialise");

		//change values of any variables specified in the reply
		if ($h)
		{
			foreach ($h as $j) rewriteVariables($j);
		}
	}

?>
